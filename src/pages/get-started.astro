---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Get Started | Hoogly" description="Sign up to get started with Hoogly." type="website">
  <style>
    body, html {
      background: #faf6f4 !important;
    }
    
    /* Override the global body gradient for this page */
    body {
      background: #faf6f4 !important;
    }
    
    /* Fallback to hide header on get-started page in case conditional rendering fails */
    header, .header, #navbar {
      display: none !important;
    }

    .get-started-bg {
      min-height: 100vh;
      background: #faf6f4;
      display: flex;
      align-items: flex-start;
      justify-content: center;
    }
    
    /* Override any container styling that might add purple background */
    .container {
      background: transparent !important;
    }
    
    /* Override main element styling */
    main {
      background: transparent !important;
    }
    .get-started-form-container {
      background: #fff;
      border-radius: 1.5rem;
      box-shadow: 0 4px 24px 0 rgba(0,0,0,0.04);
      padding: 2.5rem 2.5rem 3.5rem 2.5rem;
      max-width: 500px;
      width: 100%;
      margin: 8rem auto 4rem auto;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .anonymous-ai-headline {
      font-family: 'Outfit', sans-serif;
      font-size: 2rem; /* Decrease from 2.5rem to 2rem for desktop */
      font-weight: 400;
      color: #23221F;
      text-align: center;
      margin-bottom: 2.5rem;
      line-height: 1.13;
      letter-spacing: -0.01em;
    }
    .hero-highlight {
      position: relative;
      color: #23221F;
      font-weight: 600;
      padding: 0.08em 0.5em;
      border-radius: 2em;
      display: inline-block;
      overflow: visible;
      background: none;
      z-index: 1;
      vertical-align: middle;
      font-size: inherit;
      line-height: inherit;
      font-family: inherit;
      transition: color 0.2s;
      word-wrap: break-word;
      hyphens: auto;
    }

    .hero-highlight::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      height: 100%;
      width: 0%;
      background: rgba(255, 125, 97, 0.5);
      border-radius: 2em;
      z-index: 0;
      transition: width 1.2s cubic-bezier(0.77, 0, 0.175, 1);
    }

    .hero-highlight.animated::before {
      width: 100%;
    }

    .hero-highlight.animated {
      color: #23221F;
    }

    .hero-highlight-text {
      position: relative;
      z-index: 1;
    }
    .get-started-form {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .get-started-form label {
      font-family: 'Outfit', sans-serif;
      font-size: 1rem;
      color: #23221F;
      margin-bottom: 0.5rem;
      display: block;
      font-weight: 400;
      text-align: left;
      width: 100%;
      max-width: 370px;
      margin-left: auto;
      margin-right: auto;
    }
    .get-started-form input[type="text"],
    .get-started-form input[type="email"] {
      width: 100%;
      max-width: 370px;
      padding: 1.1rem 1.2rem;
      border-radius: 0.7rem;
      border: 1px solid #e0e0e0;
      background: #fff;
      font-size: 1.15rem;
      margin-bottom: 0.5rem;
      font-family: 'Outfit', sans-serif;
      color: #23221F;
      box-shadow: 0 2px 8px 0 rgba(0,0,0,0.04);
      outline: none;
      transition: box-shadow 0.2s, border 0.2s;
      display: block;
      margin-left: auto;
      margin-right: auto;
      text-align: left;
    }
    .get-started-form input[type="text"]::placeholder,
    .get-started-form input[type="email"]::placeholder {
      color: #c7c7c7;
      opacity: 1;
    }
    .get-started-form input[type="text"]:focus,
    .get-started-form input[type="email"]:focus {
      box-shadow: 0 0 0 2px #b16ba6;
      border: 1px solid #b16ba6;
    }
    .get-started-form button {
      background: #ff8661;
      color: #fff;
      font-family: 'Outfit', sans-serif;
      font-size: 1.1rem;
      font-weight: 500;
      border: none;
      border-radius: 2rem;
      padding: 1.1rem 2.8rem;
      margin-top: 0.5rem;
      margin-bottom: 2.5rem;
      cursor: pointer;
      transition: background 0.2s;
      box-shadow: 0 2px 8px 0 rgba(0,0,0,0.03);
      display: block;
      margin-left: auto;
      margin-right: auto;
    }
    .get-started-form button:hover {
      background: #ff6a3d;
    }
    .get-started-form .form-group {
      width: 100%;
      margin-bottom: 0.8rem;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .get-started-form .honeypot {
      display: none;
    }
    .error-message {
      color: #dc3545;
      font-size: 0.9rem;
      margin-top: 0.5rem;
      font-family: 'Outfit', sans-serif;
      text-align: left;
      width: 100%;
      max-width: 370px;
      margin-left: auto;
      margin-right: auto;
      min-height: 1.2rem;
    }
    .get-started-form input.error {
      border: 1px solid #dc3545;
      box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.2);
    }
    @media (max-width: 600px) {
      .get-started-form-container {
        padding: 1.5rem 0.5rem 2.5rem 0.5rem;
        max-width: 98vw;
      }
      .anonymous-ai-headline {
        font-size: 1.5rem;
      }
    }
  </style>
  <div class="get-started-bg">
    <div class="get-started-form-container">
      <form class="get-started-form" id="getStartedForm" autocomplete="off" novalidate>
        <div class="anonymous-ai-headline">Let's <span class="hero-highlight"><span class="hero-highlight-text">Get Started</span></span></div>
        <div class="form-group">
          <label for="name">Name *</label>
          <input type="text" id="name" name="name" placeholder="Jane Doe" required />
          <div class="error-message" id="name-error"></div>
        </div>
        <div class="form-group">
          <label for="email">Company Email *</label>
          <input type="email" id="email" name="email" placeholder="janedoe@hoogly.com" required />
          <div class="error-message" id="email-error"></div>
        </div>
        <div class="form-group">
          <label for="company">Company Name *</label>
          <input type="text" id="company" name="company" placeholder="Hoogly" required />
          <div class="error-message" id="company-error"></div>
        </div>
        <div class="honeypot">
          <label for="website">Website</label>
          <input type="text" id="website" name="website" tabindex="-1" autocomplete="off" />
        </div>
        <input type="hidden" id="referrer" name="referrer" />
        <input type="hidden" id="buttonLabel" name="buttonLabel" />
        <input type="hidden" id="pageSource" name="pageSource" />
        <button type="submit">Submit to get started</button>
      </form>
    </div>
  </div>
  <script>
    document.addEventListener("astro:page-load", function () {
      // Set up form parameters
      const referrerInput = document.getElementById('referrer') as HTMLInputElement | null;
      if (referrerInput) referrerInput.value = document.referrer;
      const urlParams = new URLSearchParams(window.location.search);
      const buttonLabel = urlParams.get('button-label') || '';
      const buttonLabelInput = document.getElementById('buttonLabel') as HTMLInputElement | null;
      if (buttonLabelInput) buttonLabelInput.value = buttonLabel;
      const pageSource = urlParams.get('page-source') || '';
      const pageSourceInput = document.getElementById('pageSource') as HTMLInputElement | null;
      if (pageSourceInput) pageSourceInput.value = pageSource;

      // All users will see the form first, regardless of source

      // Trigger highlight animation for regular form page
      const highlight = document.querySelector('.hero-highlight');
      if (highlight) {
        setTimeout(() => highlight.classList.add('animated'), 200);
      }

      // Set up form handling
      const form = document.getElementById('getStartedForm') as HTMLFormElement | null;
      if (form) {
        // Clear error messages when user starts typing
        const inputs = form.querySelectorAll('input[type="text"], input[type="email"]');
        inputs.forEach(input => {
          input.addEventListener('input', function(this: HTMLInputElement) {
            const fieldName = this.name;
            const errorElement = document.getElementById(`${fieldName}-error`);
            if (errorElement) {
              errorElement.textContent = '';
            }
            this.classList.remove('error');
          });
        });

        form.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          // Clear previous errors
          const errorElements = form.querySelectorAll('.error-message');
          errorElements.forEach(el => (el as HTMLElement).textContent = '');
          const inputElements = form.querySelectorAll('input');
          inputElements.forEach(el => (el as HTMLInputElement).classList.remove('error'));

          const websiteInput = document.getElementById('website') as HTMLInputElement | null;
          if (websiteInput && websiteInput.value) return;

          const nameInput = document.getElementById('name') as HTMLInputElement | null;
          const emailInput = document.getElementById('email') as HTMLInputElement | null;
          const companyInput = document.getElementById('company') as HTMLInputElement | null;
          const formReferrerInput = document.getElementById('referrer') as HTMLInputElement | null;
          const formButtonLabelInput = document.getElementById('buttonLabel') as HTMLInputElement | null;
          const formPageSourceInput = document.getElementById('pageSource') as HTMLInputElement | null;

          const name = nameInput ? nameInput.value.trim() : '';
          const email = emailInput ? emailInput.value.trim() : '';
          const company = companyInput ? companyInput.value.trim() : '';
          const formReferrer = formReferrerInput ? formReferrerInput.value : '';
          const formButtonLabel = formButtonLabelInput ? formButtonLabelInput.value : '';
          const formPageSource = formPageSourceInput ? formPageSourceInput.value : '';

          let hasErrors = false;

          // Validate name
          if (!name) {
            const nameError = document.getElementById('name-error');
            if (nameError) nameError.textContent = 'This field is mandatory';
            if (nameInput) nameInput.classList.add('error');
            hasErrors = true;
          }

          // Validate email
          if (!email) {
            const emailError = document.getElementById('email-error');
            if (emailError) emailError.textContent = 'This field is mandatory';
            if (emailInput) emailInput.classList.add('error');
            hasErrors = true;
          } else if (!/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) {
            const emailError = document.getElementById('email-error');
            if (emailError) emailError.textContent = 'Please enter a valid email address';
            if (emailInput) emailInput.classList.add('error');
            hasErrors = true;
          }

          // Validate company
          if (!company) {
            const companyError = document.getElementById('company-error');
            if (companyError) companyError.textContent = 'This field is mandatory';
            if (companyInput) companyInput.classList.add('error');
            hasErrors = true;
          }

          if (hasErrors) return;

          if (typeof window !== 'undefined' && (window as any).posthog) {
            // Determine which event to send based on the source
            const isPricingContactUs = formPageSource && (formPageSource.includes('pricing-') && formButtonLabel === 'Contact Us');
            const eventName = isPricingContactUs ? 'pricing_contact_us_form_submitted' : 'get_started_form_submitted';
            
            (window as any).posthog.capture(eventName, {
              name,
              email,
              company,
              referrer: formReferrer,
              buttonLabel: formButtonLabel,
              pageSource: formPageSource
            });
          }
          
          // Show thank you message instead of redirecting
          const formContainer = document.querySelector('.get-started-form-container');
          if (formContainer) {
            // Determine which thank you message to show based on the source
            const isPricingContactUs = formPageSource && (formPageSource.includes('pricing-') && formButtonLabel === 'Contact Us');
            
            if (isPricingContactUs) {
              // Special thank you message for pricing page Contact Us clicks
              formContainer.innerHTML = `
                <div style="text-align: center; padding: 1.5rem 0;">
                  <div class="anonymous-ai-headline" style="margin-bottom: 1.5rem; font-size: 2rem; font-weight: normal;">Message <span class="hero-highlight"><span class="hero-highlight-text">received</span></span></div>
                  <div class="anonymous-ai-subheadline" style="font-size: 1.1rem; color: #444; line-height: 1.6; margin-bottom: 1.5rem;">
                    Thank you for your message. We'll be in touch shortly.
                  </div>
                  
                  <!-- Calendly section inside the white container -->
                  <div style="margin-top: 3rem;">
                    <div class="anonymous-ai-headline" style="margin-bottom: 1rem; font-size: 2rem; font-weight: 400;">Schedule Your Demo</div>
                    <div id="calendly-inline-widget" style="min-width: 320px; height: 1100px;"></div>
                  </div>
                  
                  <div class="anonymous-ai-subheadline" style="font-size: 1.1rem; color: #444; line-height: 1.6; margin-bottom: 0; margin-top: 2rem;">
                    If you'd like to skip the queue, please book a time below.
                  </div>
                </div>
              `;
            } else {
              // Standard thank you message for other form submissions
              formContainer.innerHTML = `
                <div style="text-align: center; padding: 1.5rem 0;">
                  <div class="anonymous-ai-headline" style="margin-bottom: 1.5rem; font-size: 2rem; font-weight: normal;">Download <span class="hero-highlight"><span class="hero-highlight-text">the app</span></span></div>
                  <div class="anonymous-ai-subheadline" style="font-size: 1.1rem; color: #444; line-height: 1.6; margin-bottom: 1.5rem;">
                    Then set up your workspace, create teams, and invite your people.
                  </div>
                  <a href="https://hoogly.page.link/viVj6EGk4E8mqqYdA" style="background: #ff8661; color: #fff; font-family: 'Outfit', sans-serif; font-size: 1.1rem; font-weight: 500; border: none; border-radius: 2rem; padding: 1.1rem 2.8rem; cursor: pointer; transition: background 0.2s; box-shadow: 0 2px 8px 0 rgba(0,0,0,0.03); margin-bottom: 4rem; text-decoration: none; display: inline-block;">Download</a>
                  <div class="anonymous-ai-subheadline" style="font-size: 1.1rem; color: #444; line-height: 1.6; margin-bottom: 0;">
                    If you have any questions or would like to see a demo, please book a time below.
                  </div>
                  
                  <!-- Calendly section inside the white container -->
                  <div style="margin-top: 3rem;">
                    <div class="anonymous-ai-headline" style="margin-bottom: 1rem; font-size: 2rem; font-weight: 400;">Schedule Your Demo</div>
                    <div id="calendly-inline-widget" style="min-width: 320px; height: 1100px;"></div>
                  </div>
                </div>
              `;
            }
            
            // Initialize Calendly widget
            if (typeof window !== 'undefined' && (window as any).Calendly) {
              (window as any).Calendly.initInlineWidget({
                url: 'https://calendly.com/hoogly/30min',
                parentElement: document.getElementById('calendly-inline-widget'),
                prefill: {},
                utm: {}
              });
            }
            
            // Trigger highlight animation for the thank you page
            const thankYouHighlight = document.querySelector('.hero-highlight');
            if (thankYouHighlight) {
              setTimeout(() => thankYouHighlight.classList.add('animated'), 200);
            }
          }
        });
      }
    });
  </script>
  
  <!-- Calendly inline widget script -->
  <script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js" async></script>
</Layout> 